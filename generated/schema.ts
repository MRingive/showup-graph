// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class JourneyCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("journeyId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JourneyCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JourneyCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JourneyCreated", id.toString(), this);
    }
  }

  static load(id: string): JourneyCreated | null {
    return changetype<JourneyCreated | null>(store.get("JourneyCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get journeyId(): BigInt {
    let value = this.get("journeyId");
    return value!.toBigInt();
  }

  set journeyId(value: BigInt) {
    this.set("journeyId", Value.fromBigInt(value));
  }
}

export class Journey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("journeyId", Value.fromBigInt(BigInt.zero()));
    this.set("description", Value.fromString(""));
    this.set("createdTransactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Journey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Journey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Journey", id.toString(), this);
    }
  }

  static load(id: string): Journey | null {
    return changetype<Journey | null>(store.get("Journey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get journeyId(): BigInt {
    let value = this.get("journeyId");
    return value!.toBigInt();
  }

  set journeyId(value: BigInt) {
    this.set("journeyId", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get completedTransactionHash(): Bytes | null {
    let value = this.get("completedTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set completedTransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("completedTransactionHash");
    } else {
      this.set("completedTransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get completedBlockTimestamp(): BigInt | null {
    let value = this.get("completedBlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set completedBlockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("completedBlockTimestamp");
    } else {
      this.set("completedBlockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ShowUp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("journeyId", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("note", Value.fromString(""));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ShowUp entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ShowUp must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ShowUp", id.toString(), this);
    }
  }

  static load(id: string): ShowUp | null {
    return changetype<ShowUp | null>(store.get("ShowUp", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get journeyId(): BigInt {
    let value = this.get("journeyId");
    return value!.toBigInt();
  }

  set journeyId(value: BigInt) {
    this.set("journeyId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get note(): string {
    let value = this.get("note");
    return value!.toString();
  }

  set note(value: string) {
    this.set("note", Value.fromString(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
